import investpy as inst
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from keras.layers import Dropout
import matplotlib.pyplot as plt

df = inst.get_stock_historical_data(stock='BHEL',country='INDIA',
                                   from_date='01/01/2010',to_date='31/12/2020',
                                   as_json=False,order='ascending')

df = df.reset_index()

train_set = df.iloc[:2478,4:5].values



sc = MinMaxScaler(feature_range = (0, 1))

train_set_scaled = sc.fit_transform(train_set)

X_train = []

y_train = []

for i in range(60, 2478):

    X_train.append(train_set_scaled[i-60:i, 0])

    y_train.append(train_set_scaled[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)

X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

regressor = Sequential()

regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')

#r = regressor.fit(X_train, y_train, epochs = 100, batch_size = 32)

real_stock_price = df.iloc[2478:, 4:5].values

real_stock_price = pd.DataFrame(real_stock_price)

train_set = pd.DataFrame(train_set)

dataset_total = pd.concat((train_set, real_stock_price), axis = 0)

inputs = dataset_total[len(dataset_total) - len(real_stock_price) - 60:].values

inputs = inputs.reshape(-1,1)

inputs = sc.transform(inputs)

X_test = []

for i in range(60, 76):

    X_test.append(inputs[i-60:i, 0])

X_test = np.array(X_test)

X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predicted_stock_price = regressor.predict(X_test)

nsamples, nx, ny = predicted_stock_price.shape

d2_train_dataset = predicted_stock_price.reshape((nsamples,nx*ny))

predicted_stock_price = sc.inverse_transform(d2_train_dataset)

predicted_stock_price = predicted_stock_price.reshape((960,1))

plt.plot(real_stock_price, color = 'green', label = 'BHEL Stock Price')

plt.plot(predicted_stock_price, color = 'red', label = 'Predicted BHEL Stock Price')

plt.title('BHEL Stock Price Prediction')

plt.xlabel('Time')

plt.ylabel('BHEL Stock Price')

plt.legend()

plt.show()
